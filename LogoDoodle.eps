%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G5019) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1094 1297
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1094 1297
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: RBOEMH+GillSans
%!FontType1-1.0: RBOEMH+GillSans 1.0000.1.0000
/FontInfo 1 dict dup begin
/FSType 6 def
end readonly def
14 dict begin/FontName /RBOEMH+GillSans def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /T put
dup 34 /a put
dup 35 /g put
dup 36 /Y put
dup 37 /o put
dup 38 /u put
dup 39 /r put
dup 40 /B put
dup 41 /k put
dup 42 /s put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1163 1 index div -473 2 index div 2191 3 index div 1896 5 -1 roll div]cvx def
/sfnts [<



2FFD322F003FFD3C3F3130132115211123112123048FFE19C9FE210577B2FB3B04C5000000010000000004D50575000800674039000808DF02011402080702010807080007DF06051406060505020803060412010000070603080805070600000101700101010103027F0505062F332FED11332F5D7133113311392F003F3C3C103C3F12173987052E2B087D10C487082E182B057D10C4313001330111231101330103E3F2FDFCCDFDFCF201760575FD6EFD1D02E30292FE1E00000000020037FFF0034A03AA0021002B00B040794B1A5B1A6B1A7B1A8B1A05131F231F022C0F3C0F4C0F5C0FCC1DDC1D06CB0BCB22FB0BFB22040F0B0F220205050390190119191C23986A147A1402F0140114141C0D0B2205060403422A9809420D1317961C10140B4222850105052D8F01BF01EF01031F01DF0102010110191927834F105F107F109F1004102F5DED332F11332F725D12392F10FDE53C003FED3FE4FDE417331112392F5D5DED11337C2F5D1811337D2F18313000715D015D5D5D011114333237150E01232227062322263534363F01353423220735363332171E020311070E01151416333202C32021463E4B297515748360807D73E9A6958D6AC7955A1E300DB37A5D4D493A570229FE792F316F281D5C5A7F605789285031A69AC77D4E195353FE1901112F254B38394800000000030000FE2B035E039800250031003C0102402E7615A51B02461F661F6B3C0313281313371414111137122811133710111232027A0E7511021F113B13041A240D2CB8FFC0400C1212372C95760C010C0C0337B8FFD8403612133737951A1B069626401212372695031019001609331F531F5A3B8C3A06001409093711133B033A1F0F210D242905052F8309093AB8FFD4403D1111373A83001716179017A017BF170517171D0F839021A02102212100823592350235834F1D8F1D9F1DAF1D041D1D3D2983300050000200BB3D8F3E015D10F45DED12392F5DED5D11392F5DED11332F5DED2B332FED332F1139391112391117392B5D003FED2BED3FED2B12392F5DED2B33331217395D313000712B2B2B015D5D133436332115231E0115140E010706151416171E011716151406232226353437263534363726012206151416333236353426032206151421323635342652D7BA017BBA362A528193674D65A9612742E9C3C5EBE75C4F43CB01564A68664E4D6768795C7501007985A8025A93AB8E375A3A488B4A160F38202916252A274264839C9D84BB363B3A2C48115A01696446475D5F474860FCDB4E3D8E47414051000000020081000004000575000500090072403F020201040504C303021403030200020102C3050014050203050002F805010105050401000F06000304040912020001040103030B0505088509B90AF70B01005F5D10F6ED322F11332F33


00>] def
/CharStrings 12 dict dup begin
/.notdef 0 def
/B 1 def
/T 2 def
/Y 3 def
/a 4 def
/g 5 def
/k 6 def
/o 7 def
/r 8 def
/s 9 def
/u 10 def
/gid422 11 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 6 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1163 -473 2191 1896}def
/UniqueID 4037552 def
currentdict currentfile eexec

F81FFF410CD896C625199573FE4AE7496DC1C4DC24B784EC29C26D60D48A878CC0CFE1B958B57A41AFD45BC91E0790B739534DD43ABD011C4732B15EA808A6C861AF0FA41F568876CBEC081A94F94B93B227F85984F55138D927AB334EAA13643D96D8DB6F6F2B1CB32ED87E8C74DA6FE74624DE5EB41888BF9639F291FD9F2B59F925A1B409F60FC04FB460FC4A7E3F2C369A83913BAC2D84C18902A59DA402374F620F0EF1FC27FA7688FFDC426ED5A4CCD289FE23BE3E60663B0122013D5374B265C95018FE71AEA69AB506E467A7CBB18B924DCBE426F859F879E713580E6D887EC617844BB6558039B42292F699350373CB897ED10563139CC25CA1B74EF71A15A44A645BDF0823028BA4A1AD6E6FC11A9C666CAB9A19B2910611DFAFE33A00A1F80F71309078C3B0F9878ED8C00D30F9A94745F7DE0096A70A5C927A50E1E7A219870EDAEEE2FCA179DE4331C44E44B3B482D4D26141617E3D149A56874981810471EEE45F9CCA6805E0CD6DAE152F776519626573E5055A9F1EFBAEABAC77E0D48BDC888796C9EF4E8C38A8A7AEE2289CCCB74260D8AF38447F701B977ACF8FEDE38034FCA0F4D4744184D0DBDCBB00FAF2EA22CAD8733FB8CC4CC2400B31A118CFBB51B21836D7401D1D59D8D5459E7D7AF71FBF398B60C0CD676E791288C3BBD7FE33844B2E6066CF243EF9EF65C8F7766BD9F2CFF688033E6AF796EC5ACB7655DC510A4337F82E077C5B82E91F148AF3B0462E1785E7514ED27D81D10E8B48B036502CE3447EB053E9BE27EEFCB887C134FE71E3CC92ED49E81DEABBDFB7BCABD63FFDDDB361EF67693BC8D0CFC116393AD3276D3F33817813B7054F9C3810FA5D498AC1250988359E7D53DEB865329C297162EA4348394A1647FA5D62AFCAF910421AC54D4E7637D19EE1D94D1817755447BB9576D29B9CDC87816C5CBEC2D2486929F0D832525B9765E15C2894B9C696387A7C45EA7072AF39D8CB12A1D38143C0898103B8BE1A62E13192119CE994B5CAD5FE8897057F919BCC86820926C95152053E8871F11F74E23EA14878D2FB81C2F33EBD26181671F3FA75013845F6BCA12B38B5DAE0F620958B521B9859382DB31DF1D2B339D7136D55F15DE8C3A4C6F299FAA3FC16B7A949D2760DB7179845A5E91BF70A8146C0791203791456A61414403F5C04AFD1F5568084A38D3EC28CAE12999413A5FA233F7FE77756B21712D9E93440A693C85481D91DB58314D81AE3752F16D2A47467D36A82E843F5B9B26C2A4B3B58F8BEE6D535150A02DE8CDE34EB23C2905F673F904B0EA1F7B7672C427D32EDDAB82F0DD4A58582DF4B193F6A975B7A52410665CC4F27CE80D31371126D4805C2F3A049B06412DF35B0EABECABEF8A27C3DE102471C56DE611ACD6637FD202CC5ACAD098A53BC87962AA9EA0AEBD3DE95394C0A20BD
D7BBE67D75686A99A91539C5D339279A8087ED81FCA996CF6EA42D5A5F5BE1F2DC444A9C693F08CB858A69B6F80EE8126E1EA52F3EFEFB4F42587AF3DE11C2C9F71531ED3175CD339B7FDF353B908B75F2C0A7BDB6E1140FF32207EAE979E32A80C23F6193620E49B73BD8CDDCD6B0F099F7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/RBOEMH+GillSans cguidfix
/F1.1/RBOEMH+GillSans renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 1094 1297 rc
2 840 m
722 840 l
722 420 l
2 420 l
2 840 l
h
f
1 0.53333336 0.53333336 sc
698 432 m
458 432 l
451.37259 432 446 437.37259 446 444 c
446 540 l
446 546.62744 451.37259 552 458 552 c
698 552 l
704.62744 552 710 546.62744 710 540 c
710 444 l
710 437.37259 704.62744 432 698 432 c
h
f*
1 0.73333335 0.53333336 sc
650 564 m
458 564 l
451.37259 564 446 569.37256 446 576 c
446 672 l
446 678.62744 451.37259 684 458 684 c
650 684 l
656.62744 684 662 678.62744 662 672 c
662 576 l
662 569.37256 656.62744 564 650 564 c
h
f*
0.40000001 0.80000001 0.40000001 sc
614 696 m
458 696 l
451.37259 696 446 701.37256 446 708 c
446 804 l
446 810.62744 451.37259 816 458 816 c
614 816 l
620.62744 816 626 810.62744 626 804 c
626 708 l
626 701.37256 620.62744 696 614 696 c
h
f
1 1 1 sc
1 0 0 -1 -10 1308 cm
312 348 m
24 348 l
24 12 l
312 12 l
312 348 l
h
q
f
Q
0 0 0 sc
S
1 1 1 sc
324 336 m
324 342.62741 318.62741 348 312 348 c
305.37259 348 300 342.62741 300 336 c
300 329.37259 305.37259 324 312 324 c
318.62741 324 324 329.37259 324 336 c
h
q
f
Q
0 0 0 sc
S
1 1 1 sc
324 24 m
324 30.627417 318.62741 36 312 36 c
305.37259 36 300 30.627417 300 24 c
300 17.372583 305.37259 12 312 12 c
318.62741 12 324 17.372583 324 24 c
h
q
f
Q
0 0 0 sc
S
1 1 1 sc
36 24 m
36 30.627417 30.627417 36 24 36 c
17.372583 36 12 30.627417 12 24 c
12 17.372583 17.372583 12 24 12 c
30.627417 12 36 17.372583 36 24 c
h
q
f
Q
0 0 0 sc
S
1 1 1 sc
36 336 m
36 342.62741 30.627417 348 24 348 c
17.372583 348 12 342.62741 12 336 c
12 329.37259 17.372583 324 24 324 c
30.627417 324 36 329.37259 36 336 c
h
q
f
Q
0 0 0 sc
S
1 1 1 sc
324 336 m
12 336 l
12 24 l
324 24 l
324 336 l
h
q
f
Q
0 0 0 sc
S
1 1 1 sc
648 348 m
360 348 l
360 348 l
353.37259 348 348 342.62741 348 336 c
348 24 l
348 24 l
348 17.372583 353.37259 12 360 12 c
648 12 l
648 12 l
654.62744 12 660 17.372583 660 24 c
660 336 l
660 336 l
660 342.62741 654.62744 348 648 348 c
h
q
f*
Q
0 0 0 sc
S
1 1 1 sc
1044 348 m
756 348 l
756 348 l
749.37256 348 744 342.62741 744 336 c
744 24 l
744 24 l
744 17.372583 749.37256 12 756 12 c
1044 12 l
1044 12 l
1050.6274 12 1056 17.372583 1056 24 c
1056 336 l
1056 336 l
1056 342.62741 1050.6274 348 1044 348 c
h
q
f*
Q
0 0 0 sc
S
24 w
1 J
84 372 m
24 432 l
S
1 w
0 J
1 1 1 sc
171.51472 363.51471 m
111.51472 423.51471 l
106.82843 428.20102 106.82843 435.79898 111.51472 440.48529 c
116.20101 445.17157 123.79899 445.17157 128.48528 440.48529 c
188.48528 380.48529 l
193.17157 375.79898 193.17157 368.20102 188.48528 363.51471 c
183.799 358.82843 176.201 358.82843 171.51472 363.51471 c
q
f
Q
0 0 0 sc
S
1 1 1 sc
747.51471 15.514719 m
687.51471 75.514717 l
682.82843 80.201012 682.82843 87.798988 687.51471 92.485283 c
692.20099 97.17157 699.79901 97.17157 704.48529 92.485283 c
764.48529 32.485283 l
769.17157 27.79899 769.17157 20.20101 764.48529 15.514719 c
759.79901 10.828427 752.20099 10.828427 747.51471 15.514719 c
q
f
Q
0 0 0 sc
S
1 1 1 sc
1044 336 m
984 396 l
984 84 l
696 84 l
756 24 l
1044 24 l
1044 336 l
h
q
f
Q
0 0 0 sc
S
1 1 1 sc
984 408 m
696 408 l
696 408 l
689.37256 408 684 402.62741 684 396 c
684 84 l
684 84 l
684 77.372581 689.37256 72 696 72 c
984 72 l
984 72 l
990.62744 72 996 77.372581 996 84 c
996 396 l
996 396 l
996 402.62741 990.62744 408 984 408 c
h
q
f*
Q
0 0 0 sc
S
0.73333335 0.53333336 1 sc
CM
374 492 m
86 492 l
86 492 l
79.372581 492 74 497.37259 74 504 c
74 816 l
74 816 l
74 822.62744 79.372581 828 86 828 c
374 828 l
374 828 l
380.62741 828 386 822.62744 386 816 c
386 504 l
386 504 l
386 497.37259 380.62741 492 374 492 c
h
f*
77.514717 824.48529 m
17.514719 764.48529 l
12.828427 759.79901 12.828427 752.20099 17.514719 747.51471 c
22.20101 742.82843 29.79899 742.82843 34.485283 747.51471 c
94.485283 807.51471 l
99.17157 812.20099 99.17157 819.79901 94.485283 824.48529 c
89.798988 829.17157 82.201012 829.17157 77.514717 824.48529 c
f
1 1 1 sc
374 504 m
314 444 l
314 756 l
26 756 l
86 816 l
374 816 l
374 504 l
h
f
0.73333335 0.53333336 1 sc
314 432 m
26 432 l
26 432 l
19.372583 432 14 437.37259 14 444 c
14 756 l
14 756 l
14 762.62744 19.372583 768 26 768 c
314 768 l
314 768 l
320.62741 768 326 762.62744 326 756 c
326 444 l
326 444 l
326 437.37259 320.62741 432 314 432 c
h
f*
12 w
1 J
0.60000002 0 1 sc
1 0 0 -1 -10 1308 cm
48 552 m
48 864 l
S
1 w
0 J
0 0 0 sc
372 816 m
372 504 l
84 504 l
S
360 828 m
360 516 l
72 516 l
S
348 840 m
348 528 l
60 528 l
S
CM
478.06641 786.64844 m
523.65234 786.64844 l
523.65234 779.69531 l
504.62891 779.69531 l
504.62891 732 l
496.77734 732 l
496.77734 779.69531 l
478.06641 779.69531 l
h
542.63672 753.60156 m
542.63672 738.32812 l
542.63672 737.10419 543.05341 736.49219 543.88672 736.49219 c
544.74609 736.49219 546.08722 737.13019 547.91016 738.40625 c
547.91016 734.07031 l
546.29559 733.02863 545 732.31903 544.02344 731.94141 c
543.04688 731.56378 542.02472 731.375 540.95703 731.375 c
537.91016 731.375 536.11328 732.57294 535.56641 734.96875 c
532.54559 732.625 529.32941 731.45312 525.91797 731.45312 c
523.41797 731.45312 521.33466 732.27997 519.66797 733.93359 c
518.00128 735.58722 517.16797 737.66406 517.16797 740.16406 c
517.16797 742.42969 517.98175 744.45441 519.60938 746.23828 c
521.237 748.02216 523.54816 749.43488 526.54297 750.47656 c
535.64453 753.60156 l
535.64453 755.51562 l
535.64453 759.83856 533.48309 762 529.16016 762 c
525.27997 762 521.50391 759.99481 517.83203 755.98438 c
517.83203 763.75781 l
520.59247 767.013 524.56378 768.64062 529.74609 768.64062 c
533.62628 768.64062 536.73828 767.625 539.08203 765.59375 c
539.86328 764.94269 540.56641 764.07684 541.19141 762.99609 c
541.81641 761.91534 542.21356 760.83466 542.38281 759.75391 c
542.55206 758.67316 542.63672 756.62238 542.63672 753.60156 c
h
535.64453 739.10938 m
535.64453 749.77344 l
530.87891 747.9375 l
528.45703 746.97394 526.74481 746.00391 525.74219 745.02734 c
524.73956 744.05078 524.23828 742.83331 524.23828 741.375 c
524.23828 739.89062 524.71356 738.67969 525.66406 737.74219 c
526.61456 736.80469 527.84503 736.33594 529.35547 736.33594 c
531.62109 736.33594 533.71747 737.26044 535.64453 739.10938 c
h
552.36328 755.51562 m
552.36328 759.34375 553.763 762.37109 556.5625 764.59766 c
559.362 766.82422 563.18359 767.9375 568.02734 767.9375 c
582.83203 767.9375 l
582.83203 762.39062 l
575.56641 762.39062 l
576.97266 760.95831 577.94922 759.65625 578.49609 758.48438 c
579.04297 757.3125 579.31641 755.97137 579.31641 754.46094 c
579.31641 752.58594 578.78253 750.74347 577.71484 748.93359 c
576.64716 747.12372 575.27344 745.737 573.59375 744.77344 c
571.91406 743.80988 569.16016 743.04169 565.33203 742.46875 c
562.64972 742.07812 561.30859 741.15363 561.30859 739.69531 c
561.30859 738.862 561.80988 738.17841 562.8125 737.64453 c
563.81512 737.11066 565.63153 736.55731 568.26172 735.98438 c
572.66278 735.02081 575.49481 734.26562 576.75781 733.71875 c
578.02081 733.17188 579.16016 732.39062 580.17578 731.375 c
581.89453 729.65625 582.75391 727.49481 582.75391 724.89062 c
582.75391 721.47919 581.237 718.75781 578.20312 716.72656 c
575.16925 714.69531 571.11328 713.67969 566.03516 713.67969 c
560.90497 713.67969 556.80988 714.70184 553.75 716.74609 c
550.69012 718.79034 549.16016 721.53125 549.16016 724.96875 c
549.16016 729.83856 552.16797 732.97656 558.18359 734.38281 c
555.78778 735.91925 554.58984 737.44269 554.58984 738.95312 c
554.58984 740.09894 555.10419 741.14062 556.13281 742.07812 c
557.16144 743.01562 558.54816 743.70575 560.29297 744.14844 c
555.00653 746.49219 552.36328 750.28125 552.36328 755.51562 c
h
565.72266 761.76562 m
563.79559 761.76562 562.15497 761.11456 560.80078 759.8125 c
559.44659 758.51044 558.76953 756.94794 558.76953 755.125 c
558.76953 753.27606 559.43359 751.74609 560.76172 750.53516 c
562.08984 749.32422 563.76953 748.71875 565.80078 748.71875 c
567.80597 748.71875 569.47919 749.33722 570.82031 750.57422 c
572.16144 751.81122 572.83203 753.35419 572.83203 755.20312 c
572.83203 757.07812 572.15497 758.64062 570.80078 759.89062 c
569.44659 761.14062 567.75391 761.76562 565.72266 761.76562 c
h
564.04297 730.32031 m
561.64716 730.32031 559.6875 729.8125 558.16406 728.79688 c
556.64062 727.78125 555.87891 726.47919 555.87891 724.89062 c
555.87891 721.19269 559.21222 719.34375 565.87891 719.34375 c
569.02997 719.34375 571.47137 719.80597 573.20312 720.73047 c
574.93488 721.65497 575.80078 722.96356 575.80078 724.65625 c
575.80078 726.32294 574.70703 727.68359 572.51953 728.73828 c
570.33203 729.79297 567.50653 730.32031 564.04297 730.32031 c
h
f
516.40234 654.57031 m
525.85547 654.57031 l
505.69922 628.86719 l
505.69922 600 l
497.69141 600 l
497.69141 628.86719 l
477.53516 654.57031 l
486.98828 654.57031 l
501.59766 635.74219 l
h
536.87109 636.01562 m
542.33984 636.01562 546.88409 634.25128 550.50391 630.72266 c
554.12372 627.19403 555.93359 622.76044 555.93359 617.42188 c
555.93359 612.23956 554.09766 607.93622 550.42578 604.51172 c
546.75391 601.08722 542.13153 599.375 536.55859 599.375 c
531.16797 599.375 526.66278 601.11328 523.04297 604.58984 c
519.42316 608.06641 517.61328 612.40887 517.61328 617.61719 c
517.61328 622.87762 519.44269 627.25909 523.10156 630.76172 c
526.76044 634.26434 531.35028 636.01562 536.87109 636.01562 c
h
536.48047 629.60938 m
533.06903 629.60938 530.26953 628.48956 528.08203 626.25 c
525.89453 624.01044 524.80078 621.15887 524.80078 617.69531 c
524.80078 614.25781 525.92059 611.45184 528.16016 609.27734 c
530.39972 607.10284 533.27734 606.01562 536.79297 606.01562 c
540.28253 606.01562 543.14062 607.11591 545.36719 609.31641 c
547.59375 611.51691 548.70703 614.33594 548.70703 617.77344 c
548.70703 621.18488 547.54816 624.01044 545.23047 626.25 c
542.91278 628.48956 539.99609 629.60938 536.48047 629.60938 c
h
586.71484 600 m
586.71484 604.57031 l
585.20441 602.92969 583.47919 601.65363 581.53906 600.74219 c
579.59894 599.83075 577.66534 599.375 575.73828 599.375 c
573.47266 599.375 571.38281 599.94141 569.46875 601.07422 c
567.55469 602.20703 566.10938 603.74347 565.13281 605.68359 c
564.15625 607.62372 563.66797 610.84637 563.66797 615.35156 c
563.66797 635.9375 l
570.77734 635.9375 l
570.77734 615.42969 l
570.77734 611.65363 571.31769 609.01691 572.39844 607.51953 c
573.47919 606.02216 575.37372 605.27344 578.08203 605.27344 c
581.46747 605.27344 584.34503 606.92706 586.71484 610.23438 c
586.71484 635.9375 l
593.82422 635.9375 l
593.82422 600 l
h
611.44141 635.9375 m
611.44141 627.69531 l
611.83203 628.32031 l
615.26953 633.86719 618.70703 636.64062 622.14453 636.64062 c
624.82684 636.64062 627.62628 635.28644 630.54297 632.57812 c
626.79297 626.32812 l
624.31903 628.67188 622.02734 629.84375 619.91797 629.84375 c
617.62628 629.84375 615.64062 628.75 613.96094 626.5625 c
612.28125 624.375 611.44141 621.78387 611.44141 618.78906 c
611.44141 600 l
604.29297 600 l
604.29297 635.9375 l
h
f
501.28125 468 m
482.80469 468 l
482.80469 522.57031 l
497.10156 522.57031 l
501.60678 522.57031 505.12241 521.96484 507.64844 520.75391 c
510.17447 519.54297 512.10156 517.87628 513.42969 515.75391 c
514.75781 513.63153 515.42188 511.17709 515.42188 508.39062 c
515.42188 503.02603 512.64844 499.18491 507.10156 496.86719 c
511.08594 496.11197 514.25653 494.47134 516.61328 491.94531 c
518.97003 489.41928 520.14844 486.39844 520.14844 482.88281 c
520.14844 480.09634 519.43231 477.60938 518 475.42188 c
516.56769 473.23438 514.46484 471.45053 511.69141 470.07031 c
508.91797 468.69009 505.44791 468 501.28125 468 c
h
497.33594 515.61719 m
490.61719 515.61719 l
490.61719 499.21094 l
495.8125 499.21094 l
499.97916 499.21094 502.94141 500.00522 504.69922 501.59375 c
506.45703 503.18228 507.33594 505.23959 507.33594 507.76562 c
507.33594 513 504.00259 515.61719 497.33594 515.61719 c
h
497.92188 492.25781 m
490.61719 492.25781 l
490.61719 474.95312 l
498.3125 474.95312 l
502.58334 474.95312 505.48047 475.28516 507.00391 475.94922 c
508.52734 476.61328 509.75131 477.64844 510.67578 479.05469 c
511.60025 480.46094 512.0625 481.97134 512.0625 483.58594 c
512.0625 485.25259 511.57422 486.77603 510.59766 488.15625 c
509.62109 489.53647 508.23438 490.56509 506.4375 491.24219 c
504.64062 491.91928 501.80209 492.25781 497.92188 492.25781 c
h
544.05469 504.01562 m
549.52344 504.01562 554.06769 502.25131 557.6875 498.72266 c
561.30731 495.194 563.11719 490.76041 563.11719 485.42188 c
563.11719 480.23959 561.28125 475.93619 557.60938 472.51172 c
553.9375 469.08725 549.31512 467.375 543.74219 467.375 c
538.35156 467.375 533.84637 469.11328 530.22656 472.58984 c
526.60675 476.06641 524.79688 480.40884 524.79688 485.61719 c
524.79688 490.87759 526.62628 495.25912 530.28516 498.76172 c
533.94403 502.26431 538.53387 504.01562 544.05469 504.01562 c
h
543.66406 497.60938 m
540.25262 497.60938 537.45312 496.48959 535.26562 494.25 c
533.07812 492.01041 531.98438 489.15884 531.98438 485.69531 c
531.98438 482.25781 533.10419 479.45181 535.34375 477.27734 c
537.58331 475.10287 540.46094 474.01562 543.97656 474.01562 c
547.46613 474.01562 550.32422 475.11588 552.55078 477.31641 c
554.77734 479.51694 555.89062 482.33594 555.89062 485.77344 c
555.89062 489.18491 554.73175 492.01041 552.41406 494.25 c
550.09637 496.48959 547.17969 497.60938 543.66406 497.60938 c
h
588.19531 504.01562 m
593.66406 504.01562 598.20831 502.25131 601.82812 498.72266 c
605.44794 495.194 607.25781 490.76041 607.25781 485.42188 c
607.25781 480.23959 605.42188 475.93619 601.75 472.51172 c
598.07812 469.08725 593.45575 467.375 587.88281 467.375 c
582.49219 467.375 577.987 469.11328 574.36719 472.58984 c
570.74738 476.06641 568.9375 480.40884 568.9375 485.61719 c
568.9375 490.87759 570.76691 495.25912 574.42578 498.76172 c
578.08466 502.26431 582.6745 504.01562 588.19531 504.01562 c
h
587.80469 497.60938 m
584.39325 497.60938 581.59375 496.48959 579.40625 494.25 c
577.21875 492.01041 576.125 489.15884 576.125 485.69531 c
576.125 482.25781 577.24481 479.45181 579.48438 477.27734 c
581.72394 475.10287 584.60156 474.01562 588.11719 474.01562 c
591.60675 474.01562 594.46484 475.11588 596.69141 477.31641 c
598.91797 479.51694 600.03125 482.33594 600.03125 485.77344 c
600.03125 489.18491 598.87238 492.01041 596.55469 494.25 c
594.237 496.48959 591.32031 497.60938 587.80469 497.60938 c
h
638.50781 503.9375 m
646.98438 503.9375 l
631.63281 486.32031 l
650.10938 468 l
640.57812 468 l
622.57031 486.32031 l
h
615.14844 522.57031 m
622.25781 522.57031 l
622.25781 468 l
615.14844 468 l
h
651.71094 470.57812 m
651.71094 478.23438 l
653.71613 476.82812 655.76691 475.68881 657.86328 474.81641 c
659.95966 473.944 661.72394 473.50781 663.15625 473.50781 c
664.64062 473.50781 665.91669 473.87241 666.98438 474.60156 c
668.05206 475.33072 668.58594 476.20312 668.58594 477.21875 c
668.58594 478.26041 668.24091 479.12631 667.55078 479.81641 c
666.86066 480.5065 665.36981 481.50259 663.07812 482.80469 c
658.49481 485.35678 655.49347 487.53775 654.07422 489.34766 c
652.65497 491.15756 651.94531 493.13022 651.94531 495.26562 c
651.94531 498.02603 653.01953 500.27866 655.16797 502.02344 c
657.31641 503.76822 660.08331 504.64062 663.46875 504.64062 c
666.98438 504.64062 670.59113 503.65103 674.28906 501.67188 c
674.28906 494.64062 l
670.07031 497.19272 666.61981 498.46875 663.9375 498.46875 c
662.55731 498.46875 661.44403 498.17578 660.59766 497.58984 c
659.75128 497.00391 659.32812 496.22916 659.32812 495.26562 c
659.32812 494.43228 659.71222 493.63803 660.48047 492.88281 c
661.24872 492.12759 662.59637 491.21616 664.52344 490.14844 c
667.0625 488.70312 l
673.05206 485.31772 676.04688 481.56772 676.04688 477.45312 c
676.04688 474.51041 674.89453 472.09506 672.58984 470.20703 c
670.28516 468.319 667.32294 467.375 663.70312 467.375 c
661.56769 467.375 659.66669 467.60287 658 468.05859 c
656.33331 468.51431 654.237 469.35416 651.71094 470.57812 c
h
f
6 w
1 0 0 -1 -10 1308 cm
444 492 m
444 612 l
S
444 624 m
444 744 l
S
444 756 m
444 876 l
S
444 552 m
204 636 l
S
CM
186.56711 669.3985 m
185.13034 673.50354 187.29343 677.99609 191.39848 679.43286 c
195.50356 680.86963 199.99611 678.7066 201.43289 674.6015 c
202.86966 670.49646 200.70657 666.00391 196.60152 664.56714 c
192.49644 663.13037 188.00389 665.2934 186.56711 669.3985 c
f
1 0 0 -1 -10 1308 cm
444 684 m
372 612 l
S
CM
356.43155 701.56848 m
359.50693 704.64386 364.49307 704.64386 367.56845 701.56848 c
370.64386 698.4931 370.64386 693.5069 367.56845 690.43152 c
364.49307 687.35614 359.50693 687.35614 356.43155 690.43152 c
353.35614 693.5069 353.35614 698.4931 356.43155 701.56848 c
f
1 0 0 -1 -10 1308 cm
444 816 m
348 756 l
S
CM
331.32202 556.17377 m
333.62711 559.86188 338.4856 560.98309 342.17374 558.67798 c
345.86188 556.37286 346.98309 551.5144 344.67798 547.82623 c
342.37289 544.13812 337.5144 543.01691 333.82626 545.32202 c
330.13812 547.62714 329.01691 552.4856 331.32202 556.17377 c
f
2 420 m
722 420 l
722 0 l
2 0 l
2 420 l
h
f
1 0.53333336 0.53333336 sc
698 12 m
458 12 l
451.37259 12 446 17.372583 446 24 c
446 120 l
446 126.62742 451.37259 132 458 132 c
698 132 l
704.62744 132 710 126.62742 710 120 c
710 24 l
710 17.372583 704.62744 12 698 12 c
h
f*
1 0.73333335 0.53333336 sc
650 144 m
458 144 l
451.37259 144 446 149.37259 446 156 c
446 252 l
446 258.62741 451.37259 264 458 264 c
650 264 l
656.62744 264 662 258.62741 662 252 c
662 156 l
662 149.37259 656.62744 144 650 144 c
h
f*
0.40000001 0.80000001 0.40000001 sc
614 276 m
458 276 l
451.37259 276 446 281.37259 446 288 c
446 384 l
446 390.62741 451.37259 396 458 396 c
614 396 l
620.62744 396 626 390.62741 626 384 c
626 288 l
626 281.37259 620.62744 276 614 276 c
h
f
0.73333335 0.53333336 1 sc
374 72 m
86 72 l
86 72 l
79.372581 72 74 77.372581 74 84 c
74 396 l
74 396 l
74 402.62741 79.372581 408 86 408 c
374 408 l
374 408 l
380.62741 408 386 402.62741 386 396 c
386 84 l
386 84 l
386 77.372581 380.62741 72 374 72 c
h
f*
77.514717 404.48529 m
17.514719 344.48529 l
12.828427 339.79898 12.828427 332.20102 17.514719 327.51471 c
22.20101 322.82843 29.79899 322.82843 34.485283 327.51471 c
94.485283 387.51471 l
99.17157 392.20102 99.17157 399.79898 94.485283 404.48529 c
89.798988 409.17157 82.201012 409.17157 77.514717 404.48529 c
f
1 1 1 sc
374 84 m
314 24 l
314 336 l
26 336 l
86 396 l
374 396 l
374 84 l
h
f
0.73333335 0.53333336 1 sc
314 12 m
26 12 l
26 12 l
19.372583 12 14 17.372583 14 24 c
14 336 l
14 336 l
14 342.62741 19.372583 348 26 348 c
314 348 l
314 348 l
320.62741 348 326 342.62741 326 336 c
326 24 l
326 24 l
326 17.372583 320.62741 12 314 12 c
h
f*
12 w
1 J
0.60000002 0 1 sc
1 0 0 -1 -10 1308 cm
48 972 m
48 1284 l
S
1 w
0 J
0 0 0 sc
372 1236 m
372 924 l
84 924 l
S
360 1248 m
360 936 l
72 936 l
S
348 1260 m
348 948 l
60 948 l
S
1 0 0 1 476.69922 312 cm
/F1.1[ 80 0 0 80 0 0]sf
0 0 m
(!"#)[ 38.320312 34.140625 0.000000 ] xS
1 0 0 1 477.53516 180 cm
0 0 m
($%&')[ 37.109375 44.140625 40.000000 0.000000 ] xS
1 0 0 1 476.78906 48 cm
0 0 m
(\(%%\)*)[ 45.039062 44.140625 44.140625 38.320312 0.000000 ] xS
6 w
0.50196081 0.50196081 0.50196081 sc
1 0 0 -1 -10 1308 cm
444 912 m
444 1032 l
S
444 1044 m
444 1164 l
S
444 1176 m
444 1296 l
S
444 972 m
204 1056 l
S
CM
186.56711 249.39848 m
185.13034 253.50356 187.29343 257.99612 191.39848 259.43289 c
195.50356 260.86966 199.99611 258.70657 201.43289 254.60152 c
202.86966 250.49644 200.70657 246.00389 196.60152 244.56711 c
192.49644 243.13034 188.00389 245.29343 186.56711 249.39848 c
f
1 0 0 -1 -10 1308 cm
444 1104 m
372 1032 l
S
CM
356.43155 281.56845 m
359.50693 284.64386 364.49307 284.64386 367.56845 281.56845 c
370.64386 278.49307 370.64386 273.50693 367.56845 270.43155 c
364.49307 267.35614 359.50693 267.35614 356.43155 270.43155 c
353.35614 273.50693 353.35614 278.49307 356.43155 281.56845 c
f
1 0 0 -1 -10 1308 cm
444 1236 m
348 1224 l
S
CM
330.18582 84.976776 m
330.72528 89.292427 334.6611 92.353645 338.97678 91.814186 c
343.29242 91.274734 346.35364 87.338882 345.81418 83.023224 c
345.27472 78.707573 341.3389 75.646355 337.02322 76.185814 c
332.70758 76.725266 329.64636 80.661118 330.18582 84.976776 c
f
0 0 0 sc
1 0 0 1 836.69922 768 cm
0 0 m
(!"#)[ 38.320312 34.140625 0.000000 ] xS
1 0 0 1 837.53516 636 cm
0 0 m
($%&')[ 37.109375 44.140625 40.000000 0.000000 ] xS
1 0 0 1 836.78906 504 cm
0 0 m
(\(%%\)*)[ 45.039062 44.140625 44.140625 38.320312 0.000000 ] xS
1 1 1 sc
CM
734 432 m
1094 432 l
1094 222 l
734 222 l
734 432 l
h
f
1 0.53333336 0.53333336 sc
1082 228 m
962 228 l
958.68628 228 956 230.68629 956 234 c
956 282 l
956 285.31372 958.68628 288 962 288 c
1082 288 l
1085.3137 288 1088 285.31372 1088 282 c
1088 234 l
1088 230.68629 1085.3137 228 1082 228 c
h
f*
1 0.73333335 0.53333336 sc
1058 294 m
962 294 l
958.68628 294 956 296.68628 956 300 c
956 348 l
956 351.31372 958.68628 354 962 354 c
1058 354 l
1061.3137 354 1064 351.31372 1064 348 c
1064 300 l
1064 296.68628 1061.3137 294 1058 294 c
h
f*
0.40000001 0.80000001 0.40000001 sc
1040 360 m
962 360 l
958.68628 360 956 362.68628 956 366 c
956 414 l
956 417.31372 958.68628 420 962 420 c
1040 420 l
1043.3137 420 1046 417.31372 1046 414 c
1046 366 l
1046 362.68628 1043.3137 360 1040 360 c
h
f
0.73333335 0.53333336 1 sc
920 258 m
776 258 l
776 258 l
772.68628 258 770 260.68628 770 264 c
770 420 l
770 420 l
770 423.31372 772.68628 426 776 426 c
920 426 l
920 426 l
923.31372 426 926 423.31372 926 420 c
926 264 l
926 264 l
926 260.68628 923.31372 258 920 258 c
h
f*
771.75739 424.24265 m
741.75739 394.24265 l
739.41418 391.89951 739.41418 388.10049 741.75739 385.75735 c
744.10052 383.41422 747.89948 383.41422 750.24261 385.75735 c
780.24261 415.75735 l
782.58582 418.10049 782.58582 421.89951 780.24261 424.24265 c
777.89948 426.58578 774.10052 426.58578 771.75739 424.24265 c
f
1 1 1 sc
920 264 m
890 234 l
890 390 l
746 390 l
776 420 l
920 420 l
920 264 l
h
f
0.73333335 0.53333336 1 sc
890 228 m
746 228 l
746 228 l
742.68628 228 740 230.68629 740 234 c
740 390 l
740 390 l
740 393.31372 742.68628 396 746 396 c
890 396 l
890 396 l
893.31372 396 896 393.31372 896 390 c
896 234 l
896 234 l
896 230.68629 893.31372 228 890 228 c
h
f*
1 J
0.60000002 0 1 sc
1 0 0 -1 -10 1308 cm
762 918 m
762 1074 l
S
0.5 w
0 J
0 0 0 sc
924 1050 m
924 894 l
780 894 l
S
918 1056 m
918 900 l
774 900 l
S
912 1062 m
912 906 l
768 906 l
S
CM
972.0332 405.32422 m
994.82617 405.32422 l
994.82617 401.84766 l
985.31445 401.84766 l
985.31445 378 l
981.38867 378 l
981.38867 401.84766 l
972.0332 401.84766 l
h
1004.3184 388.80078 m
1004.3184 381.16406 l
1004.3184 380.55209 1004.5267 380.24609 1004.9434 380.24609 c
1005.373 380.24609 1006.0436 380.56509 1006.9551 381.20312 c
1006.9551 379.03516 l
1006.1478 378.51431 1005.5 378.15952 1005.0117 377.9707 c
1004.5234 377.78189 1004.0124 377.6875 1003.4785 377.6875 c
1001.9551 377.6875 1001.0566 378.28647 1000.7832 379.48438 c
999.27277 378.3125 997.66473 377.72656 995.95898 377.72656 c
994.70898 377.72656 993.6673 378.13998 992.83398 378.9668 c
992.00067 379.79361 991.58398 380.83203 991.58398 382.08203 c
991.58398 383.21484 991.99091 384.2272 992.80469 385.11914 c
993.61847 386.01108 994.77411 386.71744 996.27148 387.23828 c
1000.8223 388.80078 l
1000.8223 389.75781 l
1000.8223 391.91928 999.74152 393 997.58008 393 c
995.63995 393 993.75195 391.99741 991.91602 389.99219 c
991.91602 393.87891 l
993.2962 395.5065 995.28192 396.32031 997.87305 396.32031 c
999.81317 396.32031 1001.3691 395.8125 1002.541 394.79688 c
1002.9316 394.47134 1003.2832 394.03842 1003.5957 393.49805 c
1003.9082 392.95767 1004.1068 392.41733 1004.1914 391.87695 c
1004.2761 391.33658 1004.3184 390.31119 1004.3184 388.80078 c
h
1000.8223 381.55469 m
1000.8223 386.88672 l
998.43945 385.96875 l
997.22852 385.48697 996.37238 385.00195 995.87109 384.51367 c
995.36981 384.02539 995.11914 383.41666 995.11914 382.6875 c
995.11914 381.94531 995.35675 381.33984 995.83203 380.87109 c
996.30731 380.40234 996.92255 380.16797 997.67773 380.16797 c
998.81055 380.16797 999.8587 380.63022 1000.8223 381.55469 c
h
1009.1816 389.75781 m
1009.1816 391.67188 1009.8815 393.18555 1011.2812 394.29883 c
1012.681 395.41211 1014.5918 395.96875 1017.0137 395.96875 c
1024.416 395.96875 l
1024.416 393.19531 l
1020.7832 393.19531 l
1021.4863 392.47916 1021.9746 391.82812 1022.248 391.24219 c
1022.5215 390.65625 1022.6582 389.98569 1022.6582 389.23047 c
1022.6582 388.29297 1022.3913 387.37173 1021.8574 386.4668 c
1021.3235 385.56186 1020.6367 384.8685 1019.7969 384.38672 c
1018.957 383.90494 1017.5801 383.52084 1015.666 383.23438 c
1014.3249 383.03906 1013.6543 382.57681 1013.6543 381.84766 c
1013.6543 381.431 1013.905 381.0892 1014.4062 380.82227 c
1014.9075 380.55533 1015.8157 380.27866 1017.1309 379.99219 c
1019.3314 379.51041 1020.7474 379.13281 1021.3789 378.85938 c
1022.0104 378.58594 1022.5801 378.19531 1023.0879 377.6875 c
1023.9473 376.82812 1024.377 375.74741 1024.377 374.44531 c
1024.377 372.73959 1023.6185 371.37891 1022.1016 370.36328 c
1020.5847 369.34766 1018.5566 368.83984 1016.0176 368.83984 c
1013.4525 368.83984 1011.405 369.35092 1009.875 370.37305 c
1008.345 371.39517 1007.5801 372.76562 1007.5801 374.48438 c
1007.5801 376.91928 1009.084 378.48828 1012.0918 379.19141 c
1010.8939 379.95963 1010.2949 380.72134 1010.2949 381.47656 c
1010.2949 382.04947 1010.5521 382.57031 1011.0664 383.03906 c
1011.5807 383.50781 1012.2741 383.85287 1013.1465 384.07422 c
1010.5032 385.24609 1009.1816 387.14062 1009.1816 389.75781 c
h
1015.8613 392.88281 m
1014.8978 392.88281 1014.0775 392.55728 1013.4004 391.90625 c
1012.7233 391.25522 1012.3848 390.47397 1012.3848 389.5625 c
1012.3848 388.63803 1012.7168 387.87305 1013.3809 387.26758 c
1014.0449 386.66211 1014.8848 386.35938 1015.9004 386.35938 c
1016.903 386.35938 1017.7396 386.66861 1018.4102 387.28711 c
1019.0807 387.90561 1019.416 388.67709 1019.416 389.60156 c
1019.416 390.53906 1019.0775 391.32031 1018.4004 391.94531 c
1017.7233 392.57031 1016.877 392.88281 1015.8613 392.88281 c
h
1015.0215 377.16016 m
1013.8235 377.16016 1012.8438 376.90625 1012.082 376.39844 c
1011.3203 375.89062 1010.9395 375.23959 1010.9395 374.44531 c
1010.9395 372.59634 1012.6061 371.67188 1015.9395 371.67188 c
1017.515 371.67188 1018.7357 371.90298 1019.6016 372.36523 c
1020.4675 372.82748 1020.9004 373.48178 1020.9004 374.32812 c
1020.9004 375.16147 1020.3535 375.8418 1019.2598 376.36914 c
1018.166 376.89648 1016.7532 377.16016 1015.0215 377.16016 c
h
f
991.20117 339.28516 m
995.92773 339.28516 l
985.84961 326.43359 l
985.84961 312 l
981.8457 312 l
981.8457 326.43359 l
971.76758 339.28516 l
976.49414 339.28516 l
983.79883 329.87109 l
h
1001.4355 330.00781 m
1004.1699 330.00781 1006.4421 329.12564 1008.252 327.36133 c
1010.0618 325.59702 1010.9668 323.38022 1010.9668 320.71094 c
1010.9668 318.11978 1010.0488 315.96811 1008.2129 314.25586 c
1006.377 312.54361 1004.0657 311.6875 1001.2793 311.6875 c
998.58398 311.6875 996.33136 312.55664 994.52148 314.29492 c
992.71161 316.0332 991.80664 318.20444 991.80664 320.80859 c
991.80664 323.43881 992.72137 325.62955 994.55078 327.38086 c
996.38019 329.13217 998.67511 330.00781 1001.4355 330.00781 c
h
1001.2402 326.80469 m
999.53448 326.80469 998.13477 326.24478 997.04102 325.125 c
995.94727 324.00522 995.40039 322.57944 995.40039 320.84766 c
995.40039 319.12891 995.96027 317.72592 997.08008 316.63867 c
998.19989 315.55142 999.63867 315.00781 1001.3965 315.00781 c
1003.1413 315.00781 1004.5703 315.55795 1005.6836 316.6582 c
1006.7969 317.75845 1007.3535 319.16797 1007.3535 320.88672 c
1007.3535 322.59244 1006.7741 324.00522 1005.6152 325.125 c
1004.4564 326.24478 1002.998 326.80469 1001.2402 326.80469 c
h
1026.3574 312 m
1026.3574 314.28516 l
1025.6022 313.46484 1024.7396 312.82681 1023.7695 312.37109 c
1022.7995 311.91537 1021.8327 311.6875 1020.8691 311.6875 c
1019.7363 311.6875 1018.6914 311.9707 1017.7344 312.53711 c
1016.7773 313.10352 1016.0547 313.87173 1015.5664 314.8418 c
1015.0781 315.81186 1014.834 317.42319 1014.834 319.67578 c
1014.834 329.96875 l
1018.3887 329.96875 l
1018.3887 319.71484 l
1018.3887 317.82681 1018.6589 316.50845 1019.1992 315.75977 c
1019.7396 315.01108 1020.6868 314.63672 1022.041 314.63672 c
1023.7337 314.63672 1025.1725 315.46353 1026.3574 317.11719 c
1026.3574 329.96875 l
1029.9121 329.96875 l
1029.9121 312 l
h
1038.7207 329.96875 m
1038.7207 325.84766 l
1038.916 326.16016 l
1040.6348 328.93359 1042.3535 330.32031 1044.0723 330.32031 c
1045.4135 330.32031 1046.8131 329.64322 1048.2715 328.28906 c
1046.3965 325.16406 l
1045.1595 326.33594 1044.0137 326.92188 1042.959 326.92188 c
1041.8131 326.92188 1040.8203 326.375 1039.9805 325.28125 c
1039.1406 324.1875 1038.7207 322.89194 1038.7207 321.39453 c
1038.7207 312 l
1035.1465 312 l
1035.1465 329.96875 l
h
f
983.64062 246 m
974.40234 246 l
974.40234 273.28516 l
981.55078 273.28516 l
983.80341 273.28516 985.56122 272.98242 986.82422 272.37695 c
988.08722 271.77148 989.05078 270.93814 989.71484 269.87695 c
990.37891 268.81577 990.71094 267.58853 990.71094 266.19531 c
990.71094 263.51303 989.32422 261.59244 986.55078 260.43359 c
988.54297 260.056 990.12823 259.23569 991.30664 257.97266 c
992.48505 256.70963 993.07422 255.19922 993.07422 253.44141 c
993.07422 252.04817 992.71613 250.80469 992 249.71094 c
991.28387 248.61719 990.23242 247.72527 988.8457 247.03516 c
987.45898 246.34505 985.72394 246 983.64062 246 c
h
981.66797 269.80859 m
978.30859 269.80859 l
978.30859 261.60547 l
980.90625 261.60547 l
982.98956 261.60547 984.4707 262.00259 985.34961 262.79688 c
986.22852 263.59116 986.66797 264.61978 986.66797 265.88281 c
986.66797 268.5 985.00128 269.80859 981.66797 269.80859 c
h
981.96094 258.12891 m
978.30859 258.12891 l
978.30859 249.47656 l
982.15625 249.47656 l
984.29169 249.47656 985.74023 249.64258 986.50195 249.97461 c
987.26367 250.30664 987.87567 250.82422 988.33789 251.52734 c
988.80011 252.23047 989.03125 252.98567 989.03125 253.79297 c
989.03125 254.6263 988.78711 255.38802 988.29883 256.07812 c
987.81055 256.76822 987.11719 257.28256 986.21875 257.62109 c
985.32031 257.95963 983.90106 258.12891 981.96094 258.12891 c
h
1005.0273 264.00781 m
1007.7617 264.00781 1010.0339 263.12564 1011.8438 261.36133 c
1013.6536 259.59702 1014.5586 257.38022 1014.5586 254.71094 c
1014.5586 252.1198 1013.6406 249.96809 1011.8047 248.25586 c
1009.9688 246.54362 1007.6575 245.6875 1004.8711 245.6875 c
1002.1758 245.6875 999.92316 246.55664 998.11328 248.29492 c
996.30341 250.0332 995.39844 252.20442 995.39844 254.80859 c
995.39844 257.43881 996.31317 259.62955 998.14258 261.38086 c
999.97198 263.13217 1002.2669 264.00781 1005.0273 264.00781 c
h
1004.832 260.80469 m
1003.1263 260.80469 1001.7266 260.24478 1000.6328 259.125 c
999.53906 258.00522 998.99219 256.57944 998.99219 254.84766 c
998.99219 253.12891 999.55206 251.72591 1000.6719 250.63867 c
1001.7917 249.55144 1003.2305 249.00781 1004.9883 249.00781 c
1006.7331 249.00781 1008.1621 249.55794 1009.2754 250.6582 c
1010.3887 251.75847 1010.9453 253.16797 1010.9453 254.88672 c
1010.9453 256.59244 1010.3659 258.00522 1009.207 259.125 c
1008.0482 260.24478 1006.5898 260.80469 1004.832 260.80469 c
h
1027.0977 264.00781 m
1029.832 264.00781 1032.1041 263.12564 1033.9141 261.36133 c
1035.724 259.59702 1036.6289 257.38022 1036.6289 254.71094 c
1036.6289 252.1198 1035.7109 249.96809 1033.875 248.25586 c
1032.0391 246.54362 1029.7279 245.6875 1026.9414 245.6875 c
1024.2461 245.6875 1021.9935 246.55664 1020.1836 248.29492 c
1018.3737 250.0332 1017.4688 252.20442 1017.4688 254.80859 c
1017.4688 257.43881 1018.3835 259.62955 1020.2129 261.38086 c
1022.0423 263.13217 1024.3373 264.00781 1027.0977 264.00781 c
h
1026.9023 260.80469 m
1025.1967 260.80469 1023.7969 260.24478 1022.7031 259.125 c
1021.6094 258.00522 1021.0625 256.57944 1021.0625 254.84766 c
1021.0625 253.12891 1021.6224 251.72591 1022.7422 250.63867 c
1023.862 249.55144 1025.3008 249.00781 1027.0586 249.00781 c
1028.8033 249.00781 1030.2324 249.55794 1031.3457 250.6582 c
1032.459 251.75847 1033.0156 253.16797 1033.0156 254.88672 c
1033.0156 256.59244 1032.4362 258.00522 1031.2773 259.125 c
1030.1185 260.24478 1028.6602 260.80469 1026.9023 260.80469 c
h
1052.2539 263.96875 m
1056.4922 263.96875 l
1048.8164 255.16016 l
1058.0547 246 l
1053.2891 246 l
1044.2852 255.16016 l
h
1040.5742 273.28516 m
1044.1289 273.28516 l
1044.1289 246 l
1040.5742 246 l
h
1058.8555 247.28906 m
1058.8555 251.11719 l
1059.858 250.41406 1060.8834 249.84441 1061.9316 249.4082 c
1062.9799 248.972 1063.8619 248.75391 1064.5781 248.75391 c
1065.3203 248.75391 1065.9584 248.9362 1066.4922 249.30078 c
1067.026 249.66536 1067.293 250.10156 1067.293 250.60938 c
1067.293 251.1302 1067.1205 251.56316 1066.7754 251.9082 c
1066.4303 252.25325 1065.6849 252.7513 1064.5391 253.40234 c
1062.2474 254.67839 1060.7467 255.76888 1060.0371 256.67383 c
1059.3275 257.57877 1058.9727 258.56509 1058.9727 259.63281 c
1058.9727 261.01303 1059.5098 262.13931 1060.584 263.01172 c
1061.6582 263.88412 1063.0416 264.32031 1064.7344 264.32031 c
1066.4922 264.32031 1068.2955 263.82553 1070.1445 262.83594 c
1070.1445 259.32031 l
1068.0352 260.59634 1066.3099 261.23438 1064.9688 261.23438 c
1064.2787 261.23438 1063.722 261.08789 1063.2988 260.79492 c
1062.8756 260.50195 1062.6641 260.11459 1062.6641 259.63281 c
1062.6641 259.21616 1062.8561 258.819 1063.2402 258.44141 c
1063.6244 258.06381 1064.2982 257.60806 1065.2617 257.07422 c
1066.5312 256.35156 l
1069.526 254.65886 1071.0234 252.78386 1071.0234 250.72656 c
1071.0234 249.2552 1070.4473 248.04753 1069.2949 247.10352 c
1068.1426 246.1595 1066.6615 245.6875 1064.8516 245.6875 c
1063.7838 245.6875 1062.8334 245.80144 1062 246.0293 c
1061.1666 246.25716 1060.1185 246.67708 1058.8555 247.28906 c
h
f
3 w
1 0 0 -1 -10 1308 cm
960 888 m
960 948 l
S
960 954 m
960 1014 l
S
960 1020 m
960 1080 l
S
960 918 m
840 960 l
S
CM
825.04474 346.26566 m
824.08691 349.00238 825.52893 351.99741 828.26569 352.95526 c
831.00238 353.91312 833.99744 352.47104 834.95526 349.73434 c
835.91309 346.99762 834.47107 344.00259 831.73431 343.04474 c
828.99762 342.08688 826.00256 343.52896 825.04474 346.26566 c
f
1 0 0 -1 -10 1308 cm
960 984 m
924 948 l
S
CM
910.28772 363.71231 m
912.33795 365.76257 915.66205 365.76257 917.71228 363.71231 c
919.76257 361.66205 919.76257 358.33795 917.71228 356.28769 c
915.66205 354.23743 912.33795 354.23743 910.28772 356.28769 c
908.23743 358.33795 908.23743 361.66205 910.28772 363.71231 c
f
1 0 0 -1 -10 1308 cm
960 1050 m
912 1020 l
S
CM
897.54803 290.7825 m
899.08472 293.24127 902.32373 293.98871 904.78247 292.452 c
907.24127 290.91525 907.98871 287.67627 906.45197 285.2175 c
904.91528 282.75873 901.67627 282.01129 899.21753 283.548 c
896.75873 285.08475 896.01129 288.32373 897.54803 290.7825 c
f
ep
end
%%Trailer
%%EOF
